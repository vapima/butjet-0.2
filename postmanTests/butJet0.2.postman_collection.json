{
	"info": {
		"_postman_id": "5d7784d9-d5ec-4184-bdfa-64bae9d99b6b",
		"name": "butJet0.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Person tests (positive)",
			"item": [
				{
					"name": "/person/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41d40537-6ff3-4bb8-9382-2a6772692fec",
								"exec": [
									"pm.environment.set(\"name\", \"PmTestName\"+Math.floor(Math.random() * 10000)+\"@gmail.com\");",
									"pm.environment.set(\"password\", \"PmTestPassword\"+Math.floor(Math.random() * 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"loc = pm.response.headers.get(\"Token\");",
									"postman.setEnvironmentVariable(\"token\",  loc);",
									"pm.test(\"Token is not Null\", function() {",
									"pm.expect(loc).not.eq(undefined);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{name}}\",\"password\":\"{{password}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65f093b2-f0e1-419b-b0f1-20468d345890",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd07c2e0-c35e-46f1-8e17-921e3bda85c4",
								"exec": [
									"pm.environment.set(\"newPassword\", \"PmTestNewPassword\"+Math.floor(Math.random() * 10000));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "{{newPassword}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/?password={{newPassword}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							],
							"query": [
								{
									"key": "password",
									"value": "{{newPassword}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/rdn",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "143da82a-e266-4be2-9b97-66c69aa917a0",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8d02dedd-cd6c-4d6d-aa7c-5d69c97f2fac",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/rdn",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								"rdn"
							]
						}
					},
					"response": []
				},
				{
					"name": "/person/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"});",
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.rows).eq('1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd07c2e0-c35e-46f1-8e17-921e3bda85c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d6b0dc9-d4a9-424c-b596-a5f53f75f3d4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "081f89b4-3c95-4725-9148-1e4aa0a5f8b0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Acc tests (positive)",
			"item": [
				{
					"name": "create_person",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41d40537-6ff3-4bb8-9382-2a6772692fec",
								"exec": [
									"pm.environment.set(\"name\", \"PmTestName\"+Math.floor(Math.random() * 100)+\"@gmail.com\");",
									"pm.environment.set(\"password\", \"PmTestPassword\"+Math.floor(Math.random() * 100));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "take_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"loc = pm.response.headers.get(\"Token\");",
									"postman.setEnvironmentVariable(\"token\",  loc);",
									"pm.test(\"Token is not Null\", function() {",
									"pm.expect(loc).not.eq(undefined);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"postman.setEnvironmentVariable(\"accname\", jsonData.name);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65f093b2-f0e1-419b-b0f1-20468d345890",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{$randomUserName}},\n    \"balance\": {{$randomInt}},\n    \"nameInfo\": {{$randomUserName}},\n    \"description\": \"\",\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2373c37-ec07-457d-9583-902abbe17b9e",
								"exec": [
									"",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"pm.test(\"test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nameInfo).to.eql(\"newname\");",
									"});",
									"pm.test(\"test description\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.eql(\"newdes\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ba8f7a0c-681b-4ae5-bc9d-efa53080ccb0",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nameInfo\": \"newname\",\n    \"description\": \"newdes\",\n    \"active\": {{$randomBoolean}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65f093b2-f0e1-419b-b0f1-20468d345890",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq('2');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65f093b2-f0e1-419b-b0f1-20468d345890",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a1ab160-6276-4af3-b90d-78238b680fb5",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"postman.setEnvironmentVariable(\"accname\", jsonData.name);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2bf9243-da3f-4ada-ab5e-7691b4bc6ae8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{$randomUserName}},\n    \"balance\": {{$randomInt}},\n     \"nameInfo\": {{$randomUserName}},\n    \"description\": \"\",\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ef01a58-bf60-4c73-8e3f-6c1c662edd35",
								"exec": [
									"",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.balance).to.eql(888111888);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "77c41b12-ae0f-409a-83b5-73f688f94e8d",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"balance\": 888111888\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/{{acc}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								"{{acc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65f093b2-f0e1-419b-b0f1-20468d345890",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{accname}}\",\n    \"balance\": {{$randomInt}},\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c06aa2f-604a-4eca-b00d-d4ba417f12b4",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "846a279e-4d1d-4be0-aa57-b61f985bf5c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{accname}}\",\n    \"balance\": {{$randomInt}},\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24b87175-84f6-4588-9264-4e3b6f72f6a9",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a604affe-4994-4302-a250-b2a8f0024a45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{accname}}\",\n    \"balance\": {{$randomInt}},\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cedbf516-cb33-4734-9800-766a12de3cb4",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "25b1be9a-062a-4e9e-aac6-1ee6b5904384",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{accname}}\",\n    \"balance\": {{$randomInt}},\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/point/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ec92479-364e-4c1a-8a08-f5ba7a9aaab4",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"acc\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01cb779b-aa23-438d-9113-6f94e63b5f4c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{accname}}\",\n    \"balance\": {{$randomInt}},\n    \"active\": {{$randomBoolean}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/ check 6 rows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c64f0462-0033-488b-9aa2-32f3baa905f5",
								"exec": [
									"var expectRows=6;",
									"var list = responseBody.length;",
									"responseJson = JSON.parse(responseBody);",
									"var list = responseJson.length;",
									"pm.test(\"Validate value count \"+expectRows, function () {",
									"    pm.expect(list).to.eq(expectRows);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"let resp =pm.response.json();",
									"responseJson = JSON.parse(responseBody);",
									"pm.test('Finding acc name', function() {",
									"    let personId = \"name\";",
									"",
									"    _.forEach(resp, (respObj, index) => {",
									"        if (respObj.persID === personId) { // or do the vice-versa",
									"            console.log('Found', respObj);",
									"            throw new Error('Found it!'); // This will make the test fail",
									"        }",
									"    });",
									"    // If not found then the test will pass... ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7b384bf-d6de-47ef-b756-785b09ec7637",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/all/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								"all",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/ del last",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1eed2a19-4b1f-4a59-9c46-99ec7c854186",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq(\"1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f4fd99a-56e0-447d-9c87-a5faa1864e5c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/{{acc}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								"{{acc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/ check 5 rows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e35e26a-0361-4680-b6dd-ff5863fac933",
								"exec": [
									"var expectRows=5;",
									"var list = responseBody.length;",
									"responseJson = JSON.parse(responseBody);",
									"var list = responseJson.length;",
									"pm.test(\"Validate value count \"+expectRows, function () {",
									"    pm.expect(list).to.eq(expectRows);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"let resp =pm.response.json();",
									"responseJson = JSON.parse(responseBody);",
									"pm.test('Finding acc name', function() {",
									"    let personId = \"name\";",
									"",
									"    _.forEach(resp, (respObj, index) => {",
									"        if (respObj.persID === personId) { // or do the vice-versa",
									"            console.log('Found', respObj);",
									"            throw new Error('Found it!'); // This will make the test fail",
									"        }",
									"    });",
									"    // If not found then the test will pass... ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0fd297d3-e70f-40ba-9e3c-88ca12525f0f",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/point/all/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"point",
								"all",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/info/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a11b975-57c5-4ac7-8056-b7ba80d4e8f4",
								"exec": [
									"var expectRows=1;",
									"var list = responseBody.length;",
									"responseJson = JSON.parse(responseBody);",
									"var list = responseJson.length;",
									"pm.test(\"Validate value count \"+expectRows, function () {",
									"    pm.expect(list).to.eq(expectRows);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b019f7cf-31ab-4635-8ae3-51ea2634c6c1",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/info/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"info",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/acc/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0110a88f-7214-473d-bfe4-31407fb55a14",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq('6');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "93782f89-238c-4def-879b-5cf326f1a171",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/acc/{{accname}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"acc",
								"{{accname}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171cb4a0-b231-4f49-8840-eba29a7a7fdc",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq('1');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd07c2e0-c35e-46f1-8e17-921e3bda85c4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "39e2058b-0e4e-458f-ba09-e4e879363dd2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3a304b00-8d24-4235-840d-f6525ffa3316",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Plan tests (positive)",
			"item": [
				{
					"name": "create_person",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7304e7b1-b18a-4efd-9cba-244ee08cafe7",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1431e39f-61bb-4d7e-adb0-4e00c8f08832",
								"exec": [
									"pm.environment.set(\"name\", \"PmTestName\"+Math.floor(Math.random() * 100)+\"@gmail.com\");",
									"pm.environment.set(\"password\", \"PmTestPassword\"+Math.floor(Math.random() * 100));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "take_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a34872ea-ceef-4e56-9ea1-cb1ab4972f87",
								"exec": [
									"loc = pm.response.headers.get(\"Token\");",
									"postman.setEnvironmentVariable(\"token\",  loc);",
									"pm.test(\"Token is not Null\", function() {",
									"pm.expect(loc).not.eq(undefined);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{name}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "/plan/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f792e25-e79d-4380-ad47-66b5875184cc",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"pm.test(\"Blance is 100\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.balance).eq(100);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"plan\", jsonData.id);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9526c0-280d-45e9-a682-8eae62adb733",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomUserName}}\",\n    \"balance\": 100,\n    \"dateExpiration\":\"2021-09-14\" \n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/plan/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"plan",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/plan/",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6bfeb0b-6b3e-4500-b68d-54aef96a4d8a",
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8a3031f-daeb-4953-8157-bd83d28f9d51",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/plan/{{plan}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"plan",
								"{{plan}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/plan/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41253510-4442-40b1-b5ad-39f677fdafd1",
								"exec": [
									"pm.test(\"Name is  not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.name).not.eq(undefined);",
									"});",
									"pm.test(\"Id is not Null\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.id).not.eq(undefined);",
									"});",
									"pm.test(\"Body have id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"pm.test(\"Body have name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});",
									"pm.test(\"Blance is 200\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.balance).eq(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c2badbcf-4599-47f2-867c-7de9da579b24",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": {{$randomUserName}},\n    \"balance\": 200,\n    \"dateExpiration\": \"2021-09-14\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/plan/{{plan}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"plan",
								"{{plan}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/plan/",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "706251da-8c5f-400f-a955-c01383aab959",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq('1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "02359001-14fc-4e38-b73c-7778abc9fc67",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/plan/{{plan}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"plan",
								"{{plan}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "672bc072-dfa9-4d10-bc15-58ef025d8a0e",
								"exec": [
									"pm.test(\"Status is deleted\", function() {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.status).eq(\"deleted\");",
									"pm.expect(jsonData.rows).eq('1');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d5b23a7-cc5a-49e1-a378-f71693408e00",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/person/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"person",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0886505-5048-4aec-8300-deadd21c8fa4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d6fd0854-9f47-4756-9e40-286bb4d533a2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6bac0f18-7df2-4532-b115-105778044e91",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "41c6a5dc-c318-4b05-93c1-c2f479d2e43d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}